#include <iostream>
#include <vector>
#include <string>

class TicTacToe {
private:
    std::vector<std::vector<char>> board;
    char currentPlayer;

    bool checkWin() {
        // Check horizontal and vertical
        for (int i = 0; i < 3; ++i) {
            if ((board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != ' ') ||
                (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != ' ')) {
                return true;
            }
        }
        // Check diagonals
        if ((board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != ' ') ||
            (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[0][2] != ' ')) {
            return true;
        }
        return false;
    }

    bool checkDraw() {
        for (auto &row : board) {
            for (auto cell : row) {
                if (cell == ' ') {
                    return false;
                }
            }
        }
        return true;
    }

    void switchPlayer() {
        currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
    }

    void displayBoard() {
        std::cout << "\n";
        for (int i = 0; i < 3; i++) {
            std::cout << " " << board[i][0] << " | " << board[i][1] << " | " << board[i][2] << "\n";
            if (i < 2) {
                std::cout << "---+---+---\n";
            }
        }
        std::cout << "\n";
    }

public:
    TicTacToe() : board(3, std::vector<char>(3, ' ')), currentPlayer('X') {}

    void playGame() {
        std::string input;
        int row, col;
        bool playing = true;

        while (playing) {
            displayBoard();
            bool validMove = false;
            while (!validMove) {
                std::cout << "Player " << currentPlayer << ", enter row and column to place " << currentPlayer << " (e.g., 1 2): ";
                std::cin >> row >> col;
                if (row >= 1 && row <= 3 && col >= 1 && col <= 3 && board[row - 1][col - 1] == ' ') {
                    board[row - 1][col - 1] = currentPlayer;
                    validMove = true;
                } else {
                    std::cout << "Invalid move, try again.\n";
                }
            }

            if (checkWin()) {
                displayBoard();
                std::cout << "Player " << currentPlayer << " wins!\n";
                playing = false;
            } else if (checkDraw()) {
                displayBoard();
                std::cout << "It's a draw!\n";
                playing = false;
            } else {
                switchPlayer();
            }
        }

        std::cout << "Do you want to play again? (yes/no): ";
        std::cin >> input;
        if (input == "yes") {
            board = std::vector<std::vector<char>>(3, std::vector<char>(3, ' ')); // Reset board
            currentPlayer = 'X'; // Reset to player X
            playGame(); // Start new game
        }
    }
};

int main() {
    TicTacToe game;
    game.playGame();
    return 0;
}
